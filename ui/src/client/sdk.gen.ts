// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { DeleteConfigData, DeleteConfigResponses, DeleteConfigErrors, GetCurrentConfigData, GetCurrentConfigResponses, UpdateConfigData, UpdateConfigResponses, UpdateConfigErrors, ResetConfigData, ResetConfigResponses, CreateConfigData, CreateConfigResponses, CreateConfigErrors, SwitchConfigData, SwitchConfigResponses, SwitchConfigErrors, GetConfigSchemaData, GetConfigSchemaResponses, GetConfigUiSchemaData, GetConfigUiSchemaResponses, GetDefaultConfigData, GetDefaultConfigResponses, GetWebSocketConnectionsData, GetWebSocketConnectionsResponses, ListFilesData, ListFilesResponses, ListFilesErrors, StartScrapeData, StartScrapeResponses, ScrapeSingleFileData, ScrapeSingleFileResponses, ScrapeSingleFileErrors, CreateSymlinkData, CreateSymlinkResponses, CreateSymlinkErrors, AddSubtitlesData, AddSubtitlesResponses, GetActorsData, GetActorsResponses, CompleteActorsData, CompleteActorsResponses, CheckCookiesData, CheckCookiesResponses, GetSiteUrlsData, GetSiteUrlsResponses, SetSiteUrlData, SetSiteUrlResponses, SetSiteUrlErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * 删除配置文件
 */
export const deleteConfig = <ThrowOnError extends boolean = false>(options: Options<DeleteConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteConfigResponses, DeleteConfigErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/config/',
        ...options
    });
};

/**
 * 获取当前配置
 */
export const getCurrentConfig = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentConfigResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/config/',
        ...options
    });
};

/**
 * 更新配置
 */
export const updateConfig = <ThrowOnError extends boolean = false>(options: Options<UpdateConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateConfigResponses, UpdateConfigErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/config/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 重置配置
 * 将当前配置重置为默认值
 */
export const resetConfig = <ThrowOnError extends boolean = false>(options?: Options<ResetConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ResetConfigResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/config/reset',
        ...options
    });
};

/**
 * 创建配置文件
 * 创建指定名称的配置文件
 */
export const createConfig = <ThrowOnError extends boolean = false>(options: Options<CreateConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateConfigResponses, CreateConfigErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/config/create',
        ...options
    });
};

/**
 * 切换配置
 * 切换到现有的配置文件。
 */
export const switchConfig = <ThrowOnError extends boolean = false>(options: Options<SwitchConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SwitchConfigResponses, SwitchConfigErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/config/switch',
        ...options
    });
};

/**
 * 获取配置架构
 * 返回配置的JSON架构。
 */
export const getConfigSchema = <ThrowOnError extends boolean = false>(options?: Options<GetConfigSchemaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigSchemaResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/config/schema',
        ...options
    });
};

/**
 * 获取UI架构
 * 返回配置的UI架构。
 */
export const getConfigUiSchema = <ThrowOnError extends boolean = false>(options?: Options<GetConfigUiSchemaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigUiSchemaResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/config/ui_schema',
        ...options
    });
};

/**
 * 获取默认配置
 * 返回默认配置。
 */
export const getDefaultConfig = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDefaultConfigResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/config/default',
        ...options
    });
};

/**
 * 获取所有 WebSocket 连接信息
 */
export const getWebSocketConnections = <ThrowOnError extends boolean = false>(options?: Options<GetWebSocketConnectionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWebSocketConnectionsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/ws/connections',
        ...options
    });
};

/**
 * 列出文件和目录
 * 列出指定路径下的文件和目录. 仅允许访问 `SAFE_DIRS` 目录下的内容, `SAFE_DIRS` 可通过服务器环境变量 `MDCX_SAFE_DIRS` 设置. 指向 `SAFE_DIRS` 外目录的软链接本身可见, 但无法访问其内容.
 */
export const listFiles = <ThrowOnError extends boolean = false>(options: Options<ListFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFilesResponses, ListFilesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/files/list',
        ...options
    });
};

/**
 * 开始刮削
 * 使用当前配置运行刮削流程, 无需额外参数
 */
export const startScrape = <ThrowOnError extends boolean = false>(options?: Options<StartScrapeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StartScrapeResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/legacy/scrape',
        ...options
    });
};

/**
 * 单文件刮削
 */
export const scrapeSingleFile = <ThrowOnError extends boolean = false>(options: Options<ScrapeSingleFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ScrapeSingleFileResponses, ScrapeSingleFileErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/legacy/scrape/single',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 创建软链接
 */
export const createSymlink = <ThrowOnError extends boolean = false>(options: Options<CreateSymlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSymlinkResponses, CreateSymlinkErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/legacy/symlink',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 检查并添加字幕
 * 检查媒体库字幕情况并自动添加 (依据本地字幕包)
 */
export const addSubtitles = <ThrowOnError extends boolean = false>(options?: Options<AddSubtitlesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddSubtitlesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/legacy/subtitles',
        ...options
    });
};

/**
 * 查看媒体服务器演员名单
 * 查看 emby/jellyfin 中符合条件的演员名单
 */
export const getActors = <ThrowOnError extends boolean = false>(options?: Options<GetActorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetActorsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/legacy/actors',
        ...options
    });
};

/**
 * 补全演员信息
 * 补全 emby/jellyfin 演员信息/头像
 */
export const completeActors = <ThrowOnError extends boolean = false>(options?: Options<CompleteActorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CompleteActorsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/legacy/actors/complete',
        ...options
    });
};

/**
 * Cookie 有效性检查
 */
export const checkCookies = <ThrowOnError extends boolean = false>(options?: Options<CheckCookiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CheckCookiesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/legacy/cookies',
        ...options
    });
};

/**
 * 获取网站自定义网址
 * 获取网站自定义网址设置, 对未设置的网站返回空字符串
 */
export const getSiteUrls = <ThrowOnError extends boolean = false>(options?: Options<GetSiteUrlsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSiteUrlsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/legacy/sites',
        ...options
    });
};

/**
 * 设置网站自定义网址
 * 指定网站自定义网址设置
 */
export const setSiteUrl = <ThrowOnError extends boolean = false>(options: Options<SetSiteUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetSiteUrlResponses, SetSiteUrlErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'X-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/legacy/sites',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};