// This file is auto-generated by @hey-api/openapi-ts

import { type Options, deleteConfig, getCurrentConfig, updateConfig, resetConfig, createConfig, switchConfig, getConfigSchema, getConfigUiSchema, getDefaultConfig, getWebSocketConnections, listFiles, startScrape, scrapeSingleFile, createSymlink, addSubtitles, getActors, completeActors, checkCookies, getSiteUrls, setSiteUrl } from '../sdk.gen';
import { type UseMutationOptions, queryOptions, type DefaultError } from '@tanstack/react-query';
import type { DeleteConfigData, DeleteConfigError, GetCurrentConfigData, UpdateConfigData, UpdateConfigError, ResetConfigData, CreateConfigData, CreateConfigError, SwitchConfigData, SwitchConfigError, SwitchConfigResponse, GetConfigSchemaData, GetConfigUiSchemaData, GetDefaultConfigData, GetWebSocketConnectionsData, ListFilesData, StartScrapeData, ScrapeSingleFileData, ScrapeSingleFileError, CreateSymlinkData, CreateSymlinkError, AddSubtitlesData, GetActorsData, CompleteActorsData, CheckCookiesData, GetSiteUrlsData, SetSiteUrlData, SetSiteUrlError } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

/**
 * 删除配置文件
 */
export const deleteConfigMutation = (options?: Partial<Options<DeleteConfigData>>): UseMutationOptions<unknown, AxiosError<DeleteConfigError>, Options<DeleteConfigData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteConfigError>, Options<DeleteConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getCurrentConfigQueryKey = (options?: Options<GetCurrentConfigData>) => createQueryKey('getCurrentConfig', options);

/**
 * 获取当前配置
 */
export const getCurrentConfigOptions = (options?: Options<GetCurrentConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCurrentConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCurrentConfigQueryKey(options)
    });
};

/**
 * 更新配置
 */
export const updateConfigMutation = (options?: Partial<Options<UpdateConfigData>>): UseMutationOptions<unknown, AxiosError<UpdateConfigError>, Options<UpdateConfigData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UpdateConfigError>, Options<UpdateConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resetConfigQueryKey = (options?: Options<ResetConfigData>) => createQueryKey('resetConfig', options);

/**
 * 重置配置
 * 将当前配置重置为默认值
 */
export const resetConfigOptions = (options?: Options<ResetConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetConfigQueryKey(options)
    });
};

/**
 * 重置配置
 * 将当前配置重置为默认值
 */
export const resetConfigMutation = (options?: Partial<Options<ResetConfigData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ResetConfigData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ResetConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resetConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createConfigQueryKey = (options: Options<CreateConfigData>) => createQueryKey('createConfig', options);

/**
 * 创建配置文件
 * 创建指定名称的配置文件
 */
export const createConfigOptions = (options: Options<CreateConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createConfigQueryKey(options)
    });
};

/**
 * 创建配置文件
 * 创建指定名称的配置文件
 */
export const createConfigMutation = (options?: Partial<Options<CreateConfigData>>): UseMutationOptions<unknown, AxiosError<CreateConfigError>, Options<CreateConfigData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<CreateConfigError>, Options<CreateConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const switchConfigQueryKey = (options: Options<SwitchConfigData>) => createQueryKey('switchConfig', options);

/**
 * 切换配置
 * 切换到现有的配置文件。
 */
export const switchConfigOptions = (options: Options<SwitchConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await switchConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: switchConfigQueryKey(options)
    });
};

/**
 * 切换配置
 * 切换到现有的配置文件。
 */
export const switchConfigMutation = (options?: Partial<Options<SwitchConfigData>>): UseMutationOptions<SwitchConfigResponse, AxiosError<SwitchConfigError>, Options<SwitchConfigData>> => {
    const mutationOptions: UseMutationOptions<SwitchConfigResponse, AxiosError<SwitchConfigError>, Options<SwitchConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await switchConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getConfigSchemaQueryKey = (options?: Options<GetConfigSchemaData>) => createQueryKey('getConfigSchema', options);

/**
 * 获取配置架构
 * 返回配置的JSON架构。
 */
export const getConfigSchemaOptions = (options?: Options<GetConfigSchemaData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigSchema({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigSchemaQueryKey(options)
    });
};

export const getConfigUiSchemaQueryKey = (options?: Options<GetConfigUiSchemaData>) => createQueryKey('getConfigUiSchema', options);

/**
 * 获取UI架构
 * 返回配置的UI架构。
 */
export const getConfigUiSchemaOptions = (options?: Options<GetConfigUiSchemaData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigUiSchema({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigUiSchemaQueryKey(options)
    });
};

export const getDefaultConfigQueryKey = (options?: Options<GetDefaultConfigData>) => createQueryKey('getDefaultConfig', options);

/**
 * 获取默认配置
 * 返回默认配置。
 */
export const getDefaultConfigOptions = (options?: Options<GetDefaultConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDefaultConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDefaultConfigQueryKey(options)
    });
};

export const getWebSocketConnectionsQueryKey = (options?: Options<GetWebSocketConnectionsData>) => createQueryKey('getWebSocketConnections', options);

/**
 * 获取所有 WebSocket 连接信息
 */
export const getWebSocketConnectionsOptions = (options?: Options<GetWebSocketConnectionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWebSocketConnections({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWebSocketConnectionsQueryKey(options)
    });
};

export const listFilesQueryKey = (options: Options<ListFilesData>) => createQueryKey('listFiles', options);

/**
 * 列出文件和目录
 * 列出指定路径下的文件和目录. 仅允许访问 `SAFE_DIRS` 目录下的内容, `SAFE_DIRS` 可通过服务器环境变量 `MDCX_SAFE_DIRS` 设置. 指向 `SAFE_DIRS` 外目录的软链接本身可见, 但无法访问其内容.
 */
export const listFilesOptions = (options: Options<ListFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listFilesQueryKey(options)
    });
};

export const startScrapeQueryKey = (options?: Options<StartScrapeData>) => createQueryKey('startScrape', options);

/**
 * 开始刮削
 * 使用当前配置运行刮削流程, 无需额外参数
 */
export const startScrapeOptions = (options?: Options<StartScrapeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await startScrape({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: startScrapeQueryKey(options)
    });
};

/**
 * 开始刮削
 * 使用当前配置运行刮削流程, 无需额外参数
 */
export const startScrapeMutation = (options?: Partial<Options<StartScrapeData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<StartScrapeData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<StartScrapeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await startScrape({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const scrapeSingleFileQueryKey = (options: Options<ScrapeSingleFileData>) => createQueryKey('scrapeSingleFile', options);

/**
 * 单文件刮削
 */
export const scrapeSingleFileOptions = (options: Options<ScrapeSingleFileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await scrapeSingleFile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: scrapeSingleFileQueryKey(options)
    });
};

/**
 * 单文件刮削
 */
export const scrapeSingleFileMutation = (options?: Partial<Options<ScrapeSingleFileData>>): UseMutationOptions<unknown, AxiosError<ScrapeSingleFileError>, Options<ScrapeSingleFileData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<ScrapeSingleFileError>, Options<ScrapeSingleFileData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await scrapeSingleFile({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createSymlinkQueryKey = (options: Options<CreateSymlinkData>) => createQueryKey('createSymlink', options);

/**
 * 创建软链接
 */
export const createSymlinkOptions = (options: Options<CreateSymlinkData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createSymlink({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createSymlinkQueryKey(options)
    });
};

/**
 * 创建软链接
 */
export const createSymlinkMutation = (options?: Partial<Options<CreateSymlinkData>>): UseMutationOptions<unknown, AxiosError<CreateSymlinkError>, Options<CreateSymlinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<CreateSymlinkError>, Options<CreateSymlinkData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createSymlink({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addSubtitlesQueryKey = (options?: Options<AddSubtitlesData>) => createQueryKey('addSubtitles', options);

/**
 * 检查并添加字幕
 * 检查媒体库字幕情况并自动添加 (依据本地字幕包)
 */
export const addSubtitlesOptions = (options?: Options<AddSubtitlesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addSubtitles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addSubtitlesQueryKey(options)
    });
};

/**
 * 检查并添加字幕
 * 检查媒体库字幕情况并自动添加 (依据本地字幕包)
 */
export const addSubtitlesMutation = (options?: Partial<Options<AddSubtitlesData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<AddSubtitlesData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<AddSubtitlesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addSubtitles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getActorsQueryKey = (options?: Options<GetActorsData>) => createQueryKey('getActors', options);

/**
 * 查看媒体服务器演员名单
 * 查看 emby/jellyfin 中符合条件的演员名单
 */
export const getActorsOptions = (options?: Options<GetActorsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getActors({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getActorsQueryKey(options)
    });
};

export const completeActorsQueryKey = (options?: Options<CompleteActorsData>) => createQueryKey('completeActors', options);

/**
 * 补全演员信息
 * 补全 emby/jellyfin 演员信息/头像
 */
export const completeActorsOptions = (options?: Options<CompleteActorsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await completeActors({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: completeActorsQueryKey(options)
    });
};

/**
 * 补全演员信息
 * 补全 emby/jellyfin 演员信息/头像
 */
export const completeActorsMutation = (options?: Partial<Options<CompleteActorsData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CompleteActorsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CompleteActorsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await completeActors({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const checkCookiesQueryKey = (options?: Options<CheckCookiesData>) => createQueryKey('checkCookies', options);

/**
 * Cookie 有效性检查
 */
export const checkCookiesOptions = (options?: Options<CheckCookiesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await checkCookies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: checkCookiesQueryKey(options)
    });
};

/**
 * Cookie 有效性检查
 */
export const checkCookiesMutation = (options?: Partial<Options<CheckCookiesData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CheckCookiesData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CheckCookiesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await checkCookies({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSiteUrlsQueryKey = (options?: Options<GetSiteUrlsData>) => createQueryKey('getSiteUrls', options);

/**
 * 获取网站自定义网址
 * 获取网站自定义网址设置, 对未设置的网站返回空字符串
 */
export const getSiteUrlsOptions = (options?: Options<GetSiteUrlsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSiteUrls({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSiteUrlsQueryKey(options)
    });
};

export const setSiteUrlQueryKey = (options: Options<SetSiteUrlData>) => createQueryKey('setSiteUrl', options);

/**
 * 设置网站自定义网址
 * 指定网站自定义网址设置
 */
export const setSiteUrlOptions = (options: Options<SetSiteUrlData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await setSiteUrl({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: setSiteUrlQueryKey(options)
    });
};

/**
 * 设置网站自定义网址
 * 指定网站自定义网址设置
 */
export const setSiteUrlMutation = (options?: Partial<Options<SetSiteUrlData>>): UseMutationOptions<unknown, AxiosError<SetSiteUrlError>, Options<SetSiteUrlData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<SetSiteUrlError>, Options<SetSiteUrlData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await setSiteUrl({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};