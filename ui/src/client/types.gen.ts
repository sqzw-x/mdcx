// This file is auto-generated by @hey-api/openapi-ts

/**
 * CDChar
 */
export type CdChar = 'letter' | 'endc' | 'digital' | 'middle_number' | 'underline' | 'space' | 'point';

/**
 * CleanAction
 */
export type CleanAction = 'clean_ext' | 'clean_name' | 'clean_contains' | 'clean_size' | 'clean_ignore_ext' | 'clean_ignore_contains' | 'i_know' | 'i_agree' | 'auto_clean';

/**
 * Config
 * Pydantic model for application configuration, converted from ConfigSchema.
 */
export type Config = {
    /**
     * 媒体路径
     */
    media_path?: string;
    /**
     * 软链接路径
     */
    softlink_path?: string;
    /**
     * 成功输出目录
     */
    success_output_folder?: string;
    /**
     * 失败输出目录
     */
    failed_output_folder?: string;
    /**
     * 额外剧照目录
     */
    extrafanart_folder?: string;
    /**
     * 媒体类型
     */
    media_type?: Array<string>;
    /**
     * 字幕类型
     */
    sub_type?: Array<string>;
    /**
     * 刮削软链接路径
     */
    scrape_softlink_path?: boolean;
    /**
     * 自动链接
     */
    auto_link?: boolean;
    /**
     * 要处理的目录
     */
    folders?: Array<string>;
    /**
     * 要从文件名中删除的字符串
     */
    string?: Array<string>;
    /**
     * 要处理的最小文件大小（MB）
     */
    file_size?: number;
    /**
     * 不转义的字符串
     */
    no_escape?: Array<NoEscape>;
    /**
     * 清理规则: 扩展名
     */
    clean_ext?: Array<string>;
    /**
     * 清理规则: 文件名(完全匹配)
     */
    clean_name?: Array<string>;
    /**
     * 清理规则: 文件名包含
     */
    clean_contains?: Array<string>;
    /**
     * 清理小于此大小的文件（MB）
     */
    clean_size?: number;
    /**
     * 清理规则: 排除扩展名
     */
    clean_ignore_ext?: Array<string>;
    /**
     * 清理规则: 排除文件名包含
     */
    clean_ignore_contains?: Array<string>;
    /**
     * 启用的清理规则
     */
    clean_enable?: Array<CleanAction>;
    /**
     * 线程数
     */
    thread_number?: number;
    /**
     * 线程时间
     */
    thread_time?: number;
    /**
     * Javdb时间
     */
    javdb_time?: number;
    /**
     * 主模式
     */
    main_mode?: number;
    /**
     * 读取模式
     */
    read_mode?: Array<ReadMode>;
    /**
     * 更新模式
     */
    update_mode?: string;
    /**
     * 更新A目录
     */
    update_a_folder?: string;
    /**
     * 更新B目录
     */
    update_b_folder?: string;
    /**
     * 更新C文件模板
     */
    update_c_filetemplate?: string;
    /**
     * 更新D目录
     */
    update_d_folder?: string;
    /**
     * 更新标题模板
     */
    update_titletemplate?: string;
    /**
     * 软链接
     */
    soft_link?: number;
    /**
     * 成功后移动文件
     */
    success_file_move?: boolean;
    /**
     * 失败后移动文件
     */
    failed_file_move?: boolean;
    /**
     * 成功后重命名文件
     */
    success_file_rename?: boolean;
    /**
     * 删除空目录
     */
    del_empty_folder?: boolean;
    /**
     * 显示海报
     */
    show_poster?: boolean;
    /**
     * 下载文件类型
     */
    download_files?: Array<DownloadableFile>;
    /**
     * 保留文件类型
     */
    keep_files?: Array<KeepableFile>;
    /**
     * 高清图片来源
     */
    download_hd_pics?: Array<HdPicSource>;
    /**
     * Google使用
     */
    google_used?: Array<string>;
    /**
     * Google排除
     */
    google_exclude?: Array<string>;
    /**
     * 刮削收藏
     */
    scrape_like?: string;
    /**
     * 单个网站
     */
    website_single?: Website;
    /**
     * 有码网站源
     */
    website_youma?: Array<Website>;
    /**
     * 无码网站源
     */
    website_wuma?: Array<Website>;
    /**
     * 素人网站源
     */
    website_suren?: Array<Website>;
    /**
     * FC2网站源
     */
    website_fc2?: Array<Website>;
    /**
     * 欧美网站源
     */
    website_oumei?: Array<Website>;
    /**
     * 国产网站源
     */
    website_guochan?: Array<Website>;
    /**
     * 完整字段
     */
    whole_fields?: Array<WholeField>;
    /**
     * 空字段
     */
    none_fields?: Array<NoneField>;
    /**
     * 网站设置
     */
    website_set?: Array<WebsiteSet>;
    /**
     * 标题网站源
     */
    title_website?: Array<Website>;
    /**
     * 中文标题网站源
     */
    title_zh_website?: Array<Website>;
    /**
     * 排除的标题网站源
     */
    title_website_exclude?: Array<Website>;
    /**
     * 简介网站源
     */
    outline_website?: Array<Website>;
    /**
     * 中文简介网站源
     */
    outline_zh_website?: Array<Website>;
    /**
     * 排除的简介网站源
     */
    outline_website_exclude?: Array<Website>;
    /**
     * 演员网站源
     */
    actor_website?: Array<Website>;
    /**
     * 排除的演员网站源
     */
    actor_website_exclude?: Array<Website>;
    /**
     * 缩略图网站源
     */
    thumb_website?: Array<Website>;
    /**
     * 排除的缩略图网站源
     */
    thumb_website_exclude?: Array<Website>;
    /**
     * 海报网站源
     */
    poster_website?: Array<Website>;
    /**
     * 排除的海报网站源
     */
    poster_website_exclude?: Array<Website>;
    /**
     * 剧照网站源
     */
    extrafanart_website?: Array<Website>;
    /**
     * 排除的剧照网站源
     */
    extrafanart_website_exclude?: Array<Website>;
    /**
     * 预告片网站源
     */
    trailer_website?: Array<Website>;
    /**
     * 排除的预告片网站源
     */
    trailer_website_exclude?: Array<Website>;
    /**
     * 标签网站源
     */
    tag_website?: Array<Website>;
    /**
     * 排除的标签网站源
     */
    tag_website_exclude?: Array<Website>;
    /**
     * 发布日期网站源
     */
    release_website?: Array<Website>;
    /**
     * 排除的发布日期网站源
     */
    release_website_exclude?: Array<Website>;
    /**
     * 时长网站源
     */
    runtime_website?: Array<Website>;
    /**
     * 排除的时长网站源
     */
    runtime_website_exclude?: Array<Website>;
    /**
     * 评分网站源
     */
    score_website?: Array<Website>;
    /**
     * 排除的评分网站源
     */
    score_website_exclude?: Array<Website>;
    /**
     * 导演网站源
     */
    director_website?: Array<Website>;
    /**
     * 排除的导演网站源
     */
    director_website_exclude?: Array<Website>;
    /**
     * 系列网站源
     */
    series_website?: Array<Website>;
    /**
     * 排除的系列网站源
     */
    series_website_exclude?: Array<Website>;
    /**
     * 工作室网站源
     */
    studio_website?: Array<Website>;
    /**
     * 排除的工作室网站源
     */
    studio_website_exclude?: Array<Website>;
    /**
     * 发行商网站源
     */
    publisher_website?: Array<Website>;
    /**
     * 排除的发行商网站源
     */
    publisher_website_exclude?: Array<Website>;
    /**
     * 想看网站源
     */
    wanted_website?: Array<Website>;
    /**
     * 翻译服务
     */
    translate_by?: Array<Translator>;
    /**
     * Deepl密钥
     */
    deepl_key?: string;
    /**
     * Llm网址
     */
    llm_url?: string;
    /**
     * Llm模型
     */
    llm_model?: string;
    /**
     * Llm密钥
     */
    llm_key?: string;
    /**
     * Llm提示
     */
    llm_prompt?: string;
    /**
     * Llm每秒最大请求数
     */
    llm_max_req_sec?: number;
    /**
     * Llm最大尝试次数
     */
    llm_max_try?: number;
    /**
     * Llm温度
     */
    llm_temperature?: number;
    /**
     * 标题语言
     */
    title_language?: string;
    /**
     * 标题色花
     */
    title_sehua?: boolean;
    /**
     * 标题Yesjav
     */
    title_yesjav?: boolean;
    /**
     * 翻译标题
     */
    title_translate?: boolean;
    /**
     * 中文标题色花
     */
    title_sehua_zh?: boolean;
    /**
     * 简介语言
     */
    outline_language?: string;
    /**
     * 翻译简介
     */
    outline_translate?: boolean;
    /**
     * 显示大纲
     */
    outline_show?: Array<OutlineShow>;
    /**
     * 演员语言
     */
    actor_language?: string;
    /**
     * 演员真名
     */
    actor_realname?: boolean;
    /**
     * 翻译演员
     */
    actor_translate?: boolean;
    /**
     * 标签语言
     */
    tag_language?: string;
    /**
     * 翻译标签
     */
    tag_translate?: boolean;
    /**
     * 包含标签
     */
    tag_include?: Array<TagInclude>;
    /**
     * 导演语言
     */
    director_language?: string;
    /**
     * 翻译导演
     */
    director_translate?: boolean;
    /**
     * 系列语言
     */
    series_language?: string;
    /**
     * 翻译系列
     */
    series_translate?: boolean;
    /**
     * 工作室语言
     */
    studio_language?: string;
    /**
     * 翻译工作室
     */
    studio_translate?: boolean;
    /**
     * 发行商语言
     */
    publisher_language?: string;
    /**
     * 翻译发行商
     */
    publisher_translate?: boolean;
    /**
     * NFO包含内容
     */
    nfo_include_new?: Array<NfoInclude>;
    /**
     * NFO标语
     */
    nfo_tagline?: string;
    /**
     * NFO系列标签
     */
    nfo_tag_series?: string;
    /**
     * NFO工作室标签
     */
    nfo_tag_studio?: string;
    /**
     * NFO发行商标签
     */
    nfo_tag_publisher?: string;
    /**
     * NFO演员标签
     */
    nfo_tag_actor?: string;
    /**
     * NFO演员包含标签
     */
    nfo_tag_actor_contains?: string;
    /**
     * 目录名称
     */
    folder_name?: string;
    /**
     * 文件命名
     */
    naming_file?: string;
    /**
     * 媒体命名
     */
    naming_media?: string;
    /**
     * 禁止字符
     */
    prevent_char?: string;
    /**
     * 字段规则
     */
    fields_rule?: Array<FieldRule>;
    /**
     * 后缀排序
     */
    suffix_sort?: Array<SuffixSort>;
    /**
     * 未知演员名称
     */
    actor_no_name?: string;
    /**
     * 发布规则
     */
    release_rule?: string;
    /**
     * 目录名称最大长度
     */
    folder_name_max?: number;
    /**
     * 文件名称最大长度
     */
    file_name_max?: number;
    /**
     * 演员名称最大数量
     */
    actor_name_max?: number;
    /**
     * 更多演员名称
     */
    actor_name_more?: string;
    /**
     * UMR样式
     */
    umr_style?: string;
    /**
     * 泄露样式
     */
    leak_style?: string;
    /**
     * 无码样式
     */
    wuma_style?: string;
    /**
     * 有码样式
     */
    youma_style?: string;
    /**
     * 显示魔词位置
     */
    show_moword?: Array<ShowLocation>;
    /**
     * 显示4K位置
     */
    show_4k?: Array<ShowLocation>;
    /**
     * CD名称
     */
    cd_name?: number;
    /**
     * CD字符
     */
    cd_char?: Array<CdChar>;
    /**
     * 图片简化命名
     */
    pic_simple_name?: boolean;
    /**
     * 预告片简化命名
     */
    trailer_simple_name?: boolean;
    /**
     * 高清名称
     */
    hd_name?: string;
    /**
     * 获取高清
     */
    hd_get?: string;
    /**
     * 中文字符
     */
    cnword_char?: Array<string>;
    /**
     * 中文样式
     */
    cnword_style?: string;
    /**
     * 目录中文
     */
    folder_cnword?: boolean;
    /**
     * 文件中文
     */
    file_cnword?: boolean;
    /**
     * 字幕目录
     */
    subtitle_folder?: string;
    /**
     * 添加字幕
     */
    subtitle_add?: boolean;
    /**
     * 添加中文字幕
     */
    subtitle_add_chs?: boolean;
    /**
     * 重新刮削时添加字幕
     */
    subtitle_add_rescrape?: boolean;
    /**
     * 服务器类型
     */
    server_type?: string;
    /**
     * Emby网址
     */
    emby_url?: string;
    /**
     * API密钥
     */
    api_key?: string;
    /**
     * 用户ID
     */
    user_id?: string;
    /**
     * Emby功能开关
     */
    emby_on?: Array<EmbyAction>;
    /**
     * 使用数据库
     */
    use_database?: number;
    /**
     * 信息数据库路径
     */
    info_database_path?: string;
    /**
     * Gfriends Github
     */
    gfriends_github?: string;
    /**
     * 演员照片目录
     */
    actor_photo_folder?: string;
    /**
     * 演员照片Kodi自动
     */
    actor_photo_kodi_auto?: boolean;
    /**
     * 海报水印
     */
    poster_mark?: number;
    /**
     * 缩略图水印
     */
    thumb_mark?: number;
    /**
     * Fanart水印
     */
    fanart_mark?: number;
    /**
     * 水印大小
     */
    mark_size?: number;
    /**
     * 水印类型
     */
    mark_type?: Array<MarkType>;
    /**
     * 固定水印
     */
    mark_fixed?: string;
    /**
     * 水印位置
     */
    mark_pos?: string;
    /**
     * 边角水印位置
     */
    mark_pos_corner?: string;
    /**
     * 字幕水印位置
     */
    mark_pos_sub?: string;
    /**
     * 马赛克水印位置
     */
    mark_pos_mosaic?: string;
    /**
     * 高清水印位置
     */
    mark_pos_hd?: string;
    /**
     * 代理类型
     */
    proxy_type?: string;
    /**
     * 代理地址
     */
    proxy?: string;
    /**
     * 超时
     */
    timeout?: number;
    /**
     * 重试
     */
    retry?: number;
    /**
     * Theporndb API令牌
     */
    theporndb_api_token?: string;
    /**
     * Javdb
     */
    javdb?: string;
    /**
     * Javbus
     */
    javbus?: string;
    /**
     * 显示网页日志
     */
    show_web_log?: boolean;
    /**
     * 显示来源日志
     */
    show_from_log?: boolean;
    /**
     * 显示数据日志
     */
    show_data_log?: boolean;
    /**
     * 保存日志
     */
    save_log?: boolean;
    /**
     * 检查更新
     */
    update_check?: boolean;
    /**
     * 本地库
     */
    local_library?: string;
    /**
     * 演员名称
     */
    actors_name?: string;
    /**
     * 网盘路径
     */
    netdisk_path?: string;
    /**
     * 本地磁盘路径
     */
    localdisk_path?: string;
    /**
     * 窗口标题
     */
    window_title?: string;
    /**
     * 功能开关
     */
    switch_on?: Array<Switch>;
    /**
     * 定时器间隔
     */
    timed_interval?: string;
    /**
     * 休息计数
     */
    rest_count?: number;
    /**
     * 休息时间
     */
    rest_time?: string;
    /**
     * 声明
     */
    statement?: number;
};

/**
 * ConfigSwitchResponse
 */
export type ConfigSwitchResponse = {
    config: Config;
    /**
     * Errors
     * 加载配置时发生的错误信息列表
     */
    errors: Array<string>;
};

/**
 * CreateSoftlinksBody
 */
export type CreateSoftlinksBody = {
    /**
     * Source Dir
     * 待软链接的源目录
     */
    source_dir: string;
    /**
     * Dest Dir
     * 创建软链接的目标目录
     */
    dest_dir: string;
    /**
     * Copy Files
     * 是否复制 nfo, 图片, 字幕等文件
     */
    copy_files?: boolean;
};

/**
 * DownloadableFile
 */
export type DownloadableFile = 'poster' | 'thumb' | 'fanart' | 'extrafanart' | 'trailer' | 'nfo' | 'extrafanart_extras' | 'extrafanart_copy' | 'theme_videos' | 'ignore_pic_fail' | 'ignore_youma' | 'ignore_wuma' | 'ignore_fc2' | 'ignore_guochan' | 'ignore_size';

/**
 * EmbyAction
 */
export type EmbyAction = 'actor_info_zh_cn' | 'actor_info_zh_tw' | 'actor_info_ja' | 'actor_info_all' | 'actor_info_miss' | 'actor_photo_net' | 'actor_photo_local' | 'actor_photo_all' | 'actor_photo_miss' | 'actor_info_translate' | 'actor_info_photo' | 'graphis_backdrop' | 'graphis_face' | 'graphis_new' | 'actor_photo_auto' | 'actor_replace';

/**
 * FieldRule
 */
export type FieldRule = 'del_actor' | 'del_char' | 'fc2_seller' | 'del_num';

/**
 * FileItem
 * Represents a file or directory item.
 */
export type FileItem = {
    /**
     * Name
     * The name of the file or directory.
     */
    name: string;
    /**
     * Path
     * The absolute path of the file or directory.
     */
    path: string;
    /**
     * Type
     * The type of the item. 'file' or 'directory'.
     */
    type: 'file' | 'directory';
    /**
     * Size
     * The size of the file in bytes. Omitted for directories.
     */
    size?: number | null;
    /**
     * Last Modified
     */
    last_modified?: string | null;
};

/**
 * FileListResponse
 * The response structure for the file list endpoint.
 */
export type FileListResponse = {
    /**
     * Items
     * 指定路径下的文件和目录列表. 先目录后文件, 均按名称排序且不区分大小写.
     */
    items: Array<FileItem>;
    /**
     * Total
     * 路径下的文件和目录总数. 若大于 len(data) 说明 data 因文件过多被截断.
     */
    total: number;
};

/**
 * HDPicSource
 */
export type HdPicSource = 'poster' | 'thumb' | 'amazon' | 'official' | 'google' | 'goo_only';

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * KeepableFile
 */
export type KeepableFile = 'poster' | 'thumb' | 'fanart' | 'extrafanart' | 'trailer' | 'nfo' | 'extrafanart_copy' | 'theme_videos';

/**
 * MarkType
 */
export type MarkType = 'sub' | 'youma' | 'umr' | 'leak' | 'uncensored' | 'hd';

/**
 * NfoInclude
 */
export type NfoInclude = 'sorttitle' | 'originaltitle' | 'title_cd' | 'outline' | 'plot_' | 'originalplot' | 'outline_no_cdata' | 'release_' | 'releasedate' | 'premiered' | 'country' | 'mpaa' | 'customrating' | 'year' | 'runtime' | 'wanted' | 'score' | 'criticrating' | 'actor' | 'actor_all' | 'director' | 'series' | 'tag' | 'genre' | 'actor_set' | 'series_set' | 'studio' | 'maker' | 'publisher' | 'label' | 'poster' | 'cover' | 'trailer' | 'website';

/**
 * NoEscape
 */
export type NoEscape = 'no_skip_small_file' | 'folder' | 'skip_success_file' | 'record_success_file' | 'check_symlink' | 'symlink_definition';

/**
 * NoneField
 */
export type NoneField = 'outline' | 'actor' | 'thumb' | 'poster' | 'extrafanart' | 'trailer' | 'release' | 'runtime' | 'score' | 'tag' | 'director' | 'series' | 'studio' | 'publisher' | 'wanted';

/**
 * OutlineShow
 */
export type OutlineShow = 'show_from' | 'show_zh_jp' | 'show_jp_zh';

/**
 * ReadMode
 */
export type ReadMode = 'has_nfo_update' | 'no_nfo_scrape' | 'read_download_again' | 'read_update_nfo';

/**
 * ScrapeFileBody
 */
export type ScrapeFileBody = {
    /**
     * Path
     */
    path: string;
    /**
     * Url
     */
    url: string;
};

/**
 * SetSiteUrlBody
 */
export type SetSiteUrlBody = {
    site: Website;
    /**
     * Url
     */
    url: string;
};

/**
 * ShowLocation
 */
export type ShowLocation = 'folder' | 'file';

/**
 * SuffixSort
 */
export type SuffixSort = 'moword' | 'cnword' | 'definition';

/**
 * Switch
 */
export type Switch = 'auto_start' | 'auto_exit' | 'rest_scrape' | 'timed_scrape' | 'remain_task' | 'show_dialog_exit' | 'show_dialog_stop_scrape' | 'sort_del' | 'ipv4_only' | 'qt_dialog' | 'theporndb_no_hash' | 'hide_dock' | 'passthrough' | 'hide_menu' | 'dark_mode' | 'copy_netdisk_nfo' | 'show_logs' | 'hide_close' | 'hide_mini' | 'hide_none';

/**
 * TagInclude
 */
export type TagInclude = 'actor' | 'letters' | 'series' | 'studio' | 'publisher' | 'cnword' | 'mosaic' | 'definition';

/**
 * Translator
 */
export type Translator = 'youdao' | 'google' | 'deepl' | 'llm';

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * Website
 */
export type Website = 'airav' | 'airav_cc' | 'avsex' | 'avsox' | 'cableav' | 'cnmdb' | 'dmm' | 'faleno' | 'fantastica' | 'fc2' | 'fc2club' | 'fc2hub' | 'fc2ppvdb' | 'freejavbt' | 'getchu' | 'giga' | 'hdouban' | 'hscangku' | 'iqqtv' | 'jav321' | 'javbus' | 'javday' | 'javdb' | 'javlibrary' | 'kin8' | 'love6' | 'lulubar' | 'madouqu' | 'mdtv' | 'mgstage' | '7mmtv' | 'mywife' | 'prestige' | 'theporndb' | 'xcity';

/**
 * WebsiteSet
 */
export type WebsiteSet = 'official';

/**
 * WholeField
 */
export type WholeField = 'outline' | 'actor' | 'thumb' | 'poster' | 'extrafanart' | 'trailer' | 'release' | 'runtime' | 'score' | 'tag' | 'director' | 'series' | 'studio' | 'publisher';

export type DeleteConfigData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Name
         * 待删除的配置文件名 (不含扩展名)
         */
        name: string;
    };
    url: '/api/v1/config/';
};

export type DeleteConfigErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteConfigError = DeleteConfigErrors[keyof DeleteConfigErrors];

export type DeleteConfigResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCurrentConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/config/';
};

export type GetCurrentConfigResponses = {
    /**
     * Successful Response
     */
    200: Config;
};

export type GetCurrentConfigResponse = GetCurrentConfigResponses[keyof GetCurrentConfigResponses];

export type UpdateConfigData = {
    body: Config;
    path?: never;
    query?: never;
    url: '/api/v1/config/';
};

export type UpdateConfigErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateConfigError = UpdateConfigErrors[keyof UpdateConfigErrors];

export type UpdateConfigResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ResetConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/config/reset';
};

export type ResetConfigResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateConfigData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Name
         * 配置文件名 (不含扩展名)
         */
        name: string;
    };
    url: '/api/v1/config/create';
};

export type CreateConfigErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateConfigError = CreateConfigErrors[keyof CreateConfigErrors];

export type CreateConfigResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SwitchConfigData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Name
         * 待切换的配置文件名 (不含扩展名)
         */
        name: string;
    };
    url: '/api/v1/config/switch';
};

export type SwitchConfigErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SwitchConfigError = SwitchConfigErrors[keyof SwitchConfigErrors];

export type SwitchConfigResponses = {
    /**
     * Successful Response
     */
    200: ConfigSwitchResponse;
};

export type SwitchConfigResponse = SwitchConfigResponses[keyof SwitchConfigResponses];

export type GetConfigSchemaData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/config/schema';
};

export type GetConfigSchemaResponses = {
    /**
     * Response Getconfigschema
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetConfigSchemaResponse = GetConfigSchemaResponses[keyof GetConfigSchemaResponses];

export type GetConfigUiSchemaData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/config/ui_schema';
};

export type GetConfigUiSchemaResponses = {
    /**
     * Response Getconfiguischema
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetConfigUiSchemaResponse = GetConfigUiSchemaResponses[keyof GetConfigUiSchemaResponses];

export type GetDefaultConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/config/default';
};

export type GetDefaultConfigResponses = {
    /**
     * Successful Response
     */
    200: Config;
};

export type GetDefaultConfigResponse = GetDefaultConfigResponses[keyof GetDefaultConfigResponses];

export type GetWebSocketConnectionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/ws/connections';
};

export type GetWebSocketConnectionsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListFilesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Path
         * 服务器路径. 相对路径将基于 SAFE_DIRS 中的首个路径解析.
         */
        path: string;
    };
    url: '/api/v1/files/list';
};

export type ListFilesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListFilesError = ListFilesErrors[keyof ListFilesErrors];

export type ListFilesResponses = {
    /**
     * Successful Response
     */
    200: FileListResponse;
};

export type ListFilesResponse = ListFilesResponses[keyof ListFilesResponses];

export type StartScrapeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/legacy/scrape';
};

export type StartScrapeResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ScrapeSingleFileData = {
    body: ScrapeFileBody;
    path?: never;
    query?: never;
    url: '/api/v1/legacy/scrape/single';
};

export type ScrapeSingleFileErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ScrapeSingleFileError = ScrapeSingleFileErrors[keyof ScrapeSingleFileErrors];

export type ScrapeSingleFileResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateSymlinkData = {
    body: CreateSoftlinksBody;
    path?: never;
    query?: never;
    url: '/api/v1/legacy/symlink';
};

export type CreateSymlinkErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSymlinkError = CreateSymlinkErrors[keyof CreateSymlinkErrors];

export type CreateSymlinkResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddSubtitlesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/legacy/subtitles';
};

export type AddSubtitlesResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetActorsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/legacy/actors';
};

export type GetActorsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CompleteActorsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/legacy/actors/complete';
};

export type CompleteActorsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CheckCookiesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/legacy/cookies';
};

export type CheckCookiesResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSiteUrlsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/legacy/sites';
};

export type GetSiteUrlsResponses = {
    /**
     * Response Getsiteurls
     * Successful Response
     */
    200: {
        [key in Website]?: string;
    };
};

export type GetSiteUrlsResponse = GetSiteUrlsResponses[keyof GetSiteUrlsResponses];

export type SetSiteUrlData = {
    body: SetSiteUrlBody;
    path?: never;
    query?: never;
    url: '/api/v1/legacy/sites';
};

export type SetSiteUrlErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetSiteUrlError = SetSiteUrlErrors[keyof SetSiteUrlErrors];

export type SetSiteUrlResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};