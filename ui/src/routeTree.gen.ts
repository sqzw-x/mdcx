/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ToolRouteImport } from './routes/tool'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as NetworkRouteImport } from './routes/network'
import { Route as LogsRouteImport } from './routes/logs'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const ToolRoute = ToolRouteImport.update({
  id: '/tool',
  path: '/tool',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const NetworkRoute = NetworkRouteImport.update({
  id: '/network',
  path: '/network',
  getParentRoute: () => rootRouteImport,
} as any)
const LogsRoute = LogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/logs': typeof LogsRoute
  '/network': typeof NetworkRoute
  '/settings': typeof SettingsRoute
  '/tool': typeof ToolRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/logs': typeof LogsRoute
  '/network': typeof NetworkRoute
  '/settings': typeof SettingsRoute
  '/tool': typeof ToolRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/logs': typeof LogsRoute
  '/network': typeof NetworkRoute
  '/settings': typeof SettingsRoute
  '/tool': typeof ToolRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/auth'
    | '/logs'
    | '/network'
    | '/settings'
    | '/tool'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/auth' | '/logs' | '/network' | '/settings' | '/tool'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/auth'
    | '/logs'
    | '/network'
    | '/settings'
    | '/tool'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AuthRoute: typeof AuthRoute
  LogsRoute: typeof LogsRoute
  NetworkRoute: typeof NetworkRoute
  SettingsRoute: typeof SettingsRoute
  ToolRoute: typeof ToolRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tool': {
      id: '/tool'
      path: '/tool'
      fullPath: '/tool'
      preLoaderRoute: typeof ToolRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/network': {
      id: '/network'
      path: '/network'
      fullPath: '/network'
      preLoaderRoute: typeof NetworkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AuthRoute: AuthRoute,
  LogsRoute: LogsRoute,
  NetworkRoute: NetworkRoute,
  SettingsRoute: SettingsRoute,
  ToolRoute: ToolRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
