import datetime
import os.path
from configparser import RawConfigParser

from models.base.path import get_main_path
from models.config.config_manual import ManualConfig

CONFIG_IMPORT = [
    '''
import time


# This file was automatically generated by src/models/config_generator.py.
# Don't modify it manually.

class GeneratedConfig:
    """
    Auto generated configuration
    Also used as default configuration
    """
'''.strip()
]

CONFIG_STR = [
    '''    CONFIG_STR = f"""
[modified_time]
modified_time = {time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())}
version = {version}

[media]
media_path = {media_path}
softlink_path = {softlink_path}
success_output_folder = {success_output_folder}
failed_output_folder = {failed_output_folder}
extrafanart_folder = {extrafanart_folder}
media_type = {media_type}
sub_type = {sub_type}
scrape_softlink_path = {scrape_softlink_path}
auto_link = {auto_link}

[escape]
folders = {folders}
string = {string}
file_size = {file_size}
no_escape = {no_escape}

[clean]
clean_ext = {clean_ext}
clean_name = {clean_name}
clean_contains = {clean_contains}
clean_size = {clean_size}
clean_ignore_ext = {clean_ignore_ext}
clean_ignore_contains = {clean_ignore_contains}
clean_enable = {clean_enable}

[common]
thread_number = {thread_number}
thread_time = {thread_time}
javdb_time = {javdb_time}
main_mode = {main_mode}
read_mode = {read_mode}
update_mode = {update_mode}
update_a_folder = {update_a_folder}
update_b_folder = {update_b_folder}
update_d_folder = {update_d_folder}
soft_link = {soft_link}
success_file_move = {success_file_move}
failed_file_move = {failed_file_move}
success_file_rename = {success_file_rename}
del_empty_folder = {del_empty_folder}
show_poster = {show_poster}

[file_download]
download_files = {download_files}
keep_files = {keep_files}
download_hd_pics = {download_hd_pics}
google_used = {google_used}
google_exclude = {google_exclude}

[website]
scrape_like = {scrape_like}
website_single = {website_single}
website_youma = {website_youma}
website_wuma = {website_wuma}
website_suren = {website_suren}
website_fc2 = {website_fc2}
website_oumei = {website_oumei}
website_guochan = {website_guochan}
whole_fields = {whole_fields}
none_fields = {none_fields}
website_set = {website_set}
title_website = {title_website}
title_zh_website = {title_zh_website}
title_website_exclude = {title_website_exclude}
outline_website = {outline_website}
outline_zh_website = {outline_zh_website}
outline_website_exclude = {outline_website_exclude}
actor_website = {actor_website}
actor_website_exclude = {actor_website_exclude}
thumb_website = {thumb_website}
thumb_website_exclude = {thumb_website_exclude}
poster_website = {poster_website}
poster_website_exclude = {poster_website_exclude}
extrafanart_website = {extrafanart_website}
extrafanart_website_exclude = {extrafanart_website_exclude}
trailer_website = {trailer_website}
trailer_website_exclude = {trailer_website_exclude}
tag_website = {tag_website}
tag_website_exclude = {tag_website_exclude}
release_website = {release_website}
release_website_exclude = {release_website_exclude}
runtime_website = {runtime_website}
runtime_website_exclude = {runtime_website_exclude}
score_website = {score_website}
score_website_exclude = {score_website_exclude}
director_website = {director_website}
director_website_exclude = {director_website_exclude}
series_website = {series_website}
series_website_exclude = {series_website_exclude}
studio_website = {studio_website}
studio_website_exclude = {studio_website_exclude}
publisher_website = {publisher_website}
publisher_website_exclude = {publisher_website_exclude}
wanted_website = {wanted_website}
translate_by = {translate_by}
deepl_key = {deepl_key}
title_language = {title_language}
title_sehua = {title_sehua}
title_yesjav = {title_yesjav}
title_translate = {title_translate}
title_sehua_zh = {title_sehua_zh}
outline_language = {outline_language}
outline_translate = {outline_translate}
outline_show = {outline_show}
actor_language = {actor_language}
actor_realname = {actor_realname}
actor_translate = {actor_translate}
tag_language = {tag_language}
tag_translate = {tag_translate}
tag_include = {tag_include}
director_language = {director_language}
director_translate = {director_translate}
series_language = {series_language}
series_translate = {series_translate}
studio_language = {studio_language}
studio_translate = {studio_translate}
publisher_language = {publisher_language}
publisher_translate = {publisher_translate}
nfo_include_new = {nfo_include_new}
nfo_tagline = {nfo_tagline}
nfo_tag_series = {nfo_tag_series}
nfo_tag_studio = {nfo_tag_studio}
nfo_tag_publisher = {nfo_tag_publisher}
# website: iqqtv, javbus, javdb, freejavbt, jav321, dmm, avsox, xcity, mgstage, fc2, fc2club, fc2hub, airav, javlibrary, mdtv

[Name_Rule]
folder_name = {folder_name}
naming_file = {naming_file}
naming_media = {naming_media}
prevent_char = {prevent_char}
fields_rule = {fields_rule}
suffix_sort = {suffix_sort}
actor_no_name = {actor_no_name}
release_rule = {release_rule}
folder_name_max = {folder_name_max}
file_name_max = {file_name_max}
actor_name_max = {actor_name_max}
actor_name_more = {actor_name_more}
umr_style = {umr_style}
leak_style = {leak_style}
wuma_style = {wuma_style}
youma_style = {youma_style}
show_moword = {show_moword}
show_4k = {show_4k}
cd_name = {cd_name}
cd_char = {cd_char}
pic_name = {pic_name}
trailer_name = {trailer_name}
hd_name = {hd_name}
hd_get = {hd_get}
# 命名字段有：title, originaltitle, actor, number, studio, publisher, year, mosaic, runtime, director, release, series, definition, cnword

[subtitle]
cnword_char = {cnword_char}
cnword_style = {cnword_style}
folder_cnword = {folder_cnword}
file_cnword = {file_cnword}
subtitle_folder = {subtitle_folder}
subtitle_add = {subtitle_add}
subtitle_add_chs = {subtitle_add_chs}
subtitle_add_rescrape = {subtitle_add_rescrape}

[emby]
server_type = {server_type}
emby_url = {emby_url}
api_key = {api_key}
emby_on = {emby_on}
use_database = {use_database}
info_database_path = {info_database_path}
gfriends_github = {gfriends_github}
actor_photo_folder = {actor_photo_folder}
actor_photo_kodi_auto = {actor_photo_kodi_auto}

[mark]
poster_mark = {poster_mark}
thumb_mark = {thumb_mark}
fanart_mark = {fanart_mark}
mark_size = {mark_size}
mark_type = {mark_type}
mark_fixed = {mark_fixed}
mark_pos = {mark_pos}
mark_pos_corner = {mark_pos_corner}
mark_pos_sub = {mark_pos_sub}
mark_pos_mosaic = {mark_pos_mosaic}
mark_pos_hd = {mark_pos_hd}
# mark_size: range 1-40
# mark_type: sub, youma, umr, leak, uncensored, hd
# mark_pos: top_left, top_right, bottom_left, bottom_right

[proxy]
type = {type}
proxy = {proxy}
timeout = {timeout}
retry = {retry}
theporndb_api_token = {theporndb_api_token}
# type: no, http, socks5

[Cookies]
javdb = {javdb}
javbus = {javbus}
# cookies存在有效期，记得更新

[other]
show_web_log = {show_web_log}
show_from_log = {show_from_log}
show_data_log = {show_data_log}
save_log = {save_log}
update_check = {update_check}
local_library = {local_library}
actors_name = {actors_name}
netdisk_path = {netdisk_path}
localdisk_path = {localdisk_path}
window_title = {window_title}
switch_on = {switch_on}
timed_interval = {timed_interval}
rest_count = {rest_count}
rest_time = {rest_time}
statement = {statement}"""
'''
]


def generate_config():
    # 1. update version in config.ini.default
    # 2. config.ini.default -> config_generated.py
    config_default_path = os.path.join(get_main_path(), "config.ini.default")
    reader = RawConfigParser()
    reader.read(config_default_path, encoding="UTF-8")
    if reader.get("modified_time", "version") != str(ManualConfig.local_version):  # 设置软件版本
        reader.set("modified_time", "version", ManualConfig.local_version)
        reader.set("modified_time", "modified_time", datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        with open(config_default_path, "w", encoding="UTF-8") as f:
            reader.write(f)
    for section in reader.sections():
        CONFIG_IMPORT.append(f"\n    # {section}")
        for key, value in reader.items(section):
            if key in ManualConfig.INT_KEY or key in ManualConfig.FLOAT_KEY:
                CONFIG_IMPORT.append(f"""
    {key} = {value}""")
            else:
                CONFIG_IMPORT.append(f"""
    {key} = r'{value}'""")
        CONFIG_IMPORT.append("\n")
    with open("config_generated.py", "w", encoding="UTF-8") as f:
        f.writelines(CONFIG_IMPORT)
        f.writelines(CONFIG_STR)


if __name__ == "__main__":
    generate_config()
